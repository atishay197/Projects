#include<stdio.h>
#include<stdlib.h>
#include<CL/cl.h>
#include<string.h>
#include<conio.h>
#define MAX_SOURCE_SIZE (0x100000)
int main()
{
	int *a,*b,*c;

	int i,size;
	int wa,wb;
	int m1,m2,n1,n2;

	printf("\nEnter the value for m1:");
		scanf("%d",&m1);
		printf("\nEnter the value for n1:");
		scanf("%d",&n1);
	printf("\nEnter the value for m2:");
		scanf("%d",&m2);
	printf("\nEnter the value for n2:");
		scanf("%d",&n2);
	a=(int *)(malloc(m1*n1*sizeof(int *)));
	b=(int *)(malloc(m2*n2*sizeof(int *)));
	c=(int *)(malloc(m1*n2*sizeof(int *)));

	printf("\nEnter elements of a:");

	for(i=0;i<m1*n1;i++)

	{

		scanf("%d",&a[i]);

	}

	printf("\nEnter elements of b:");

	for(i=0;i<m2*n2;i++)

	{

		scanf("%d",&b[i]);

	}




	FILE *fp;
	char * source_str;
	size_t source_size;
	

	fp=fopen("mul.cl","r");

	
	if(!fp)

	{

		fprintf(stderr,"\n file is not opened\n");

		getch();

		exit(1);

	}

	

	source_str=(char*)malloc(MAX_SOURCE_SIZE);



	source_size=fread(source_str,1,MAX_SOURCE_SIZE,fp);



	fclose(fp);



	cl_platform_id platform_id=NULL;



	cl_device_id device_id=NULL;
	cl_uint ret_num_devices;
	cl_uint ret_num_platforms;


	

	cl_int ret=clGetPlatformIDs(1,&platform_id,&ret_num_platforms);



	ret=clGetDeviceIDs(platform_id,CL_DEVICE_TYPE_GPU,1,&device_id,&ret_num_devices);

	

	cl_context context=clCreateContext(NULL,1,&device_id,NULL,NULL,&ret);

	

	cl_command_queue command_queue=clCreateCommandQueue(context,device_id,0,&ret);







	cl_mem a_mem_obj=clCreateBuffer(context,CL_MEM_READ_ONLY,m1*n1*sizeof(int),NULL,&ret);



	cl_mem b_mem_obj=clCreateBuffer(context,CL_MEM_READ_ONLY,m2*n2*sizeof(int),NULL,&ret);

	cl_mem c_mem_obj=clCreateBuffer(context,CL_MEM_WRITE_ONLY,m1*n2*sizeof(int),NULL,&ret);
	

	

	ret=clEnqueueWriteBuffer(command_queue,a_mem_obj,CL_TRUE,0,n1*m1*sizeof(int),a,0,NULL,NULL);

	ret=clEnqueueWriteBuffer(command_queue,b_mem_obj,CL_TRUE,0,n2*m2*sizeof(int),b,0,NULL,NULL);

	ret=clEnqueueWriteBuffer(command_queue,c_mem_obj,CL_TRUE,0,m1*n2*sizeof(int),c,0,NULL,NULL);
	

	cl_program program=clCreateProgramWithSource(context,1,(const char **)&source_str,(const size_t*)&source_size,&ret);





	ret=clBuildProgram(program,1,&device_id,NULL,NULL,NULL);

	cl_kernel kernel=clCreateKernel(program,"multiply",&ret);
	ret=clSetKernelArg(kernel,0,sizeof(cl_mem),(void *)&a_mem_obj);
	ret=clSetKernelArg(kernel,1,sizeof(cl_mem),(void *)&b_mem_obj);
	ret=clSetKernelArg(kernel,2,sizeof(cl_mem),(void *)&c_mem_obj);
	ret=clSetKernelArg(kernel,3,sizeof(cl_mem),(void *)&m1);
	ret=clSetKernelArg(kernel,4,sizeof(cl_mem),(void *)&n2);
	size_t global_item_size[2]={n2,m1};
	size_t local_item_size[2]={1,1};

	ret=clEnqueueNDRangeKernel(command_queue,kernel,2,NULL,global_item_size,local_item_size,0,NULL,NULL);
    ret=clFinish(command_queue);
    ret=clEnqueueReadBuffer(command_queue,c_mem_obj,CL_TRUE,0,m1*n2*sizeof(int),c,0,NULL,NULL);
    printf("done\n\n");
    for(i=0;i<m1*n2;i++)
    {
	   printf("%d ",c[i]);
    }
   ret=clFlush(command_queue);
   ret=clReleaseKernel(kernel);
   ret=clReleaseProgram(program);
   ret=clReleaseMemObject(a_mem_obj);
   ret=clReleaseMemObject(b_mem_obj);
   ret=clReleaseMemObject(c_mem_obj);
   ret=clReleaseCommandQueue(command_queue);

   ret=clReleaseContext(context);

   getch();

   return 0;

}

