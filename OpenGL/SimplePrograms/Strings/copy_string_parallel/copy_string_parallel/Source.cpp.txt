#include<CL/cl.h>
#include<stdlib.h>
#include<conio.h>
#include<string.h>
#include<iostream>
#define MAX_SOURCE_SIZE (0X100000)
using namespace std ;
int main(int argc , char ** argv[])
{
	int size,i;
	cout <<"enter the string  "<<endl;
	char str1[500],str2[500];	
	cin >> str1 ;
	size = sizeof(str1);
	FILE *fp ; 
	char *source_str ;
	size_t source_size ;
	fp = fopen("copy.cl","r");
	if (!fp)
	{
		cout <<"error "<<endl;
		exit(1);
	}
	source_str = (char * )malloc(MAX_SOURCE_SIZE);
	source_size = fread(source_str,1 ,MAX_SOURCE_SIZE,fp);
	fclose(fp);

	cl_platform_id  platform_id = NULL ;
	cl_device_id device_id = NULL ;
	cl_uint ret_num_device ;
	cl_uint ret_num_platform ;

	cl_int ret = clGetPlatformIDs(1 , & platform_id , & ret_num_platform);
	ret= clGetDeviceIDs(platform_id, CL_DEVICE_TYPE_GPU , 1,  &device_id , &ret_num_device);

	cl_context context = clCreateContext(NULL, 1, &device_id,NULL,NULL,&ret);
	cl_command_queue command_queue =clCreateCommandQueue(context,device_id , 0 , &ret );

	cl_mem str1_mem_obj = clCreateBuffer(context,CL_MEM_READ_ONLY, size*sizeof(char), NULL, &ret);
	cl_mem str2_mem_obj = clCreateBuffer(context,CL_MEM_WRITE_ONLY, size*sizeof(char), NULL, &ret);

	
	ret = clEnqueueWriteBuffer(command_queue,str1_mem_obj, CL_TRUE ,0 , size*sizeof(char),str1,0,NULL ,NULL );

	cl_program program = clCreateProgramWithSource(context, 1,(const char**)&source_str,(const size_t*)&source_size , &ret );
	ret= clBuildProgram(program , 1, &device_id, NULL, NULL, NULL);
	cl_kernel kernel = clCreateKernel(program , "copy",&ret);
	ret= clSetKernelArg(kernel, 0,sizeof(cl_mem), (void*) &str1_mem_obj) ;
	ret= clSetKernelArg(kernel, 1,sizeof(cl_mem), (void*) &str2_mem_obj) ;
	
	size_t global_item_size = size;
	size_t local_item_size = 1 ;

	ret = clEnqueueNDRangeKernel(command_queue, kernel ,1,NULL,&global_item_size,&local_item_size,0,NULL,NULL);

	ret = clFinish(command_queue);
	ret = clEnqueueReadBuffer(command_queue, str2_mem_obj,CL_TRUE,0,size*sizeof(char),str2,0,NULL, NULL);

	cout <<"DONE "<<endl;
	cout<<str2<<endl;
	ret = clFlush(command_queue);
	ret = clReleaseKernel(kernel);
	ret = clReleaseProgram(program);
	ret = clReleaseMemObject(str1_mem_obj);
	ret = clReleaseMemObject(str2_mem_obj);
	ret = clReleaseCommandQueue(command_queue);
	ret = clReleaseContext(context);
	getch();
	return 0 ;
}